// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace raft {
constexpr LogEntry::LogEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prevlogindex_(0)
  , nextlogindex_(0){}
struct LogEntryDefaultTypeInternal {
  constexpr LogEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LogEntryDefaultTypeInternal _LogEntry_default_instance_;
constexpr AppendEntriesRequest::AppendEntriesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_()
  , term_(0)
  , leaderid_(0){}
struct AppendEntriesRequestDefaultTypeInternal {
  constexpr AppendEntriesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesRequestDefaultTypeInternal() {}
  union {
    AppendEntriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
constexpr AppendEntriesRespond::AppendEntriesRespond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accept_(false)
  , term_(0){}
struct AppendEntriesRespondDefaultTypeInternal {
  constexpr AppendEntriesRespondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppendEntriesRespondDefaultTypeInternal() {}
  union {
    AppendEntriesRespond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppendEntriesRespondDefaultTypeInternal _AppendEntriesRespond_default_instance_;
constexpr ElectRequest::ElectRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : term_(0)
  , nodeid_(0){}
struct ElectRequestDefaultTypeInternal {
  constexpr ElectRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ElectRequestDefaultTypeInternal() {}
  union {
    ElectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ElectRequestDefaultTypeInternal _ElectRequest_default_instance_;
constexpr ElectRespond::ElectRespond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accept_(false)
  , term_(0){}
struct ElectRespondDefaultTypeInternal {
  constexpr ElectRespondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ElectRespondDefaultTypeInternal() {}
  union {
    ElectRespond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ElectRespondDefaultTypeInternal _ElectRespond_default_instance_;
}  // namespace raft
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raft_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raft_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_raft_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, nextlogindex_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, log_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, leaderid_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRespond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRespond, accept_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRespond, term_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::ElectRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::ElectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::ElectRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::ElectRequest, nodeid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raft::ElectRespond, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raft::ElectRespond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raft::ElectRespond, accept_),
  PROTOBUF_FIELD_OFFSET(::raft::ElectRespond, term_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::raft::LogEntry)},
  { 9, 17, sizeof(::raft::AppendEntriesRequest)},
  { 20, 27, sizeof(::raft::AppendEntriesRespond)},
  { 29, 36, sizeof(::raft::ElectRequest)},
  { 38, 45, sizeof(::raft::ElectRespond)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_AppendEntriesRespond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_ElectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raft::_ElectRespond_default_instance_),
};

const char descriptor_table_protodef_raft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nraft.proto\022\004raft\"b\n\010LogEntry\022\031\n\014prevLo"
  "gIndex\030\001 \001(\005H\000\210\001\001\022\031\n\014nextLogIndex\030\002 \001(\005H"
  "\001\210\001\001B\017\n\r_prevLogIndexB\017\n\r_nextLogIndex\"s"
  "\n\024AppendEntriesRequest\022\021\n\004term\030\001 \001(\005H\000\210\001"
  "\001\022\033\n\003Log\030\002 \003(\0132\016.raft.LogEntry\022\025\n\010leader"
  "ID\030\003 \001(\005H\001\210\001\001B\007\n\005_termB\013\n\t_leaderID\"R\n\024A"
  "ppendEntriesRespond\022\023\n\006accept\030\001 \001(\010H\000\210\001\001"
  "\022\021\n\004term\030\002 \001(\005H\001\210\001\001B\t\n\007_acceptB\007\n\005_term\""
  "J\n\014ElectRequest\022\021\n\004term\030\001 \001(\005H\000\210\001\001\022\023\n\006no"
  "deID\030\002 \001(\005H\001\210\001\001B\007\n\005_termB\t\n\007_nodeID\"J\n\014E"
  "lectRespond\022\023\n\006accept\030\001 \001(\010H\000\210\001\001\022\021\n\004term"
  "\030\002 \001(\005H\001\210\001\001B\t\n\007_acceptB\007\n\005_term2\200\001\n\004Raft"
  "\022G\n\rAppendEntries\022\032.raft.AppendEntriesRe"
  "quest\032\032.raft.AppendEntriesRespond\022/\n\005Ele"
  "ct\022\022.raft.ElectRequest\032\022.raft.ElectRespo"
  "ndB\003\200\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raft_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto = {
  false, false, 615, descriptor_table_protodef_raft_2eproto, "raft.proto", 
  &descriptor_table_raft_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_raft_2eproto::offsets,
  file_level_metadata_raft_2eproto, file_level_enum_descriptors_raft_2eproto, file_level_service_descriptors_raft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_raft_2eproto_getter() {
  return &descriptor_table_raft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_raft_2eproto(&descriptor_table_raft_2eproto);
namespace raft {

// ===================================================================

class LogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<LogEntry>()._has_bits_);
  static void set_has_prevlogindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nextlogindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&prevlogindex_, &from.prevlogindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextlogindex_) -
    reinterpret_cast<char*>(&prevlogindex_)) + sizeof(nextlogindex_));
  // @@protoc_insertion_point(copy_constructor:raft.LogEntry)
}

inline void LogEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prevlogindex_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nextlogindex_) -
    reinterpret_cast<char*>(&prevlogindex_)) + sizeof(nextlogindex_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raft.LogEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prevlogindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextlogindex_) -
        reinterpret_cast<char*>(&prevlogindex_)) + sizeof(nextlogindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 prevLogIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prevlogindex(&has_bits);
          prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nextLogIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nextlogindex(&has_bits);
          nextlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 prevLogIndex = 1;
  if (_internal_has_prevlogindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prevlogindex(), target);
  }

  // optional int32 nextLogIndex = 2;
  if (_internal_has_nextlogindex()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nextlogindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.LogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 prevLogIndex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prevlogindex());
    }

    // optional int32 nextLogIndex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nextlogindex());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }

void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LogEntry *>(to)->MergeFrom(
      static_cast<const LogEntry &>(from));
}


void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prevlogindex_ = from.prevlogindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      nextlogindex_ = from.nextlogindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, nextlogindex_)
      + sizeof(LogEntry::nextlogindex_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, prevlogindex_)>(
          reinterpret_cast<char*>(&prevlogindex_),
          reinterpret_cast<char*>(&other->prevlogindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[0]);
}

// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesRequest>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaderid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppendEntriesRequest::AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  log_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      log_(from.log_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesRequest)
}

inline void AppendEntriesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leaderid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesRequest::ArenaDtor(void* object) {
  AppendEntriesRequest* _this = reinterpret_cast< AppendEntriesRequest* >(object);
  (void)_this;
}
void AppendEntriesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leaderid_) -
        reinterpret_cast<char*>(&term_)) + sizeof(leaderid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raft.LogEntry Log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 leaderID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_leaderid(&has_bits);
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 term = 1;
  if (_internal_has_term()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // repeated .raft.LogEntry Log = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_log(i), target, stream);
  }

  // optional int32 leaderID = 3;
  if (_internal_has_leaderid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft.LogEntry Log = 2;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 term = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_term());
    }

    // optional int32 leaderID = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_leaderid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRequest::GetClassData() const { return &_class_data_; }

void AppendEntriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEntriesRequest *>(to)->MergeFrom(
      static_cast<const AppendEntriesRequest &>(from));
}


void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      leaderid_ = from.leaderid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  log_.InternalSwap(&other->log_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, leaderid_)
      + sizeof(AppendEntriesRequest::leaderid_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[1]);
}

// ===================================================================

class AppendEntriesRespond::_Internal {
 public:
  using HasBits = decltype(std::declval<AppendEntriesRespond>()._has_bits_);
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AppendEntriesRespond::AppendEntriesRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesRespond)
}
AppendEntriesRespond::AppendEntriesRespond(const AppendEntriesRespond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accept_, &from.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesRespond)
}

inline void AppendEntriesRespond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accept_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(term_));
}

AppendEntriesRespond::~AppendEntriesRespond() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesRespond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppendEntriesRespond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesRespond::ArenaDtor(void* object) {
  AppendEntriesRespond* _this = reinterpret_cast< AppendEntriesRespond* >(object);
  (void)_this;
}
void AppendEntriesRespond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppendEntriesRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesRespond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&term_) -
        reinterpret_cast<char*>(&accept_)) + sizeof(term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRespond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppendEntriesRespond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesRespond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool accept = 1;
  if (_internal_has_accept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept(), target);
  }

  // optional int32 term = 2;
  if (_internal_has_term()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesRespond)
  return target;
}

size_t AppendEntriesRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesRespond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool accept = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 term = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_term());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRespond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesRespond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRespond::GetClassData() const { return &_class_data_; }

void AppendEntriesRespond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AppendEntriesRespond *>(to)->MergeFrom(
      static_cast<const AppendEntriesRespond &>(from));
}


void AppendEntriesRespond::MergeFrom(const AppendEntriesRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesRespond)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRespond::CopyFrom(const AppendEntriesRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRespond::IsInitialized() const {
  return true;
}

void AppendEntriesRespond::InternalSwap(AppendEntriesRespond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRespond, term_)
      + sizeof(AppendEntriesRespond::term_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRespond, accept_)>(
          reinterpret_cast<char*>(&accept_),
          reinterpret_cast<char*>(&other->accept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRespond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[2]);
}

// ===================================================================

class ElectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectRequest>()._has_bits_);
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nodeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ElectRequest::ElectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.ElectRequest)
}
ElectRequest::ElectRequest(const ElectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
  // @@protoc_insertion_point(copy_constructor:raft.ElectRequest)
}

inline void ElectRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
}

ElectRequest::~ElectRequest() {
  // @@protoc_insertion_point(destructor:raft.ElectRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ElectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ElectRequest::ArenaDtor(void* object) {
  ElectRequest* _this = reinterpret_cast< ElectRequest* >(object);
  (void)_this;
}
void ElectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.ElectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&term_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nodeid_) -
        reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nodeID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nodeid(&has_bits);
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.ElectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 term = 1;
  if (_internal_has_term()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // optional int32 nodeID = 2;
  if (_internal_has_nodeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.ElectRequest)
  return target;
}

size_t ElectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.ElectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 term = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_term());
    }

    // optional int32 nodeID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nodeid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectRequest::GetClassData() const { return &_class_data_; }

void ElectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ElectRequest *>(to)->MergeFrom(
      static_cast<const ElectRequest &>(from));
}


void ElectRequest::MergeFrom(const ElectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.ElectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      term_ = from.term_;
    }
    if (cached_has_bits & 0x00000002u) {
      nodeid_ = from.nodeid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectRequest::CopyFrom(const ElectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.ElectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectRequest::IsInitialized() const {
  return true;
}

void ElectRequest::InternalSwap(ElectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectRequest, nodeid_)
      + sizeof(ElectRequest::nodeid_)
      - PROTOBUF_FIELD_OFFSET(ElectRequest, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[3]);
}

// ===================================================================

class ElectRespond::_Internal {
 public:
  using HasBits = decltype(std::declval<ElectRespond>()._has_bits_);
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_term(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ElectRespond::ElectRespond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:raft.ElectRespond)
}
ElectRespond::ElectRespond(const ElectRespond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&accept_, &from.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:raft.ElectRespond)
}

inline void ElectRespond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accept_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(term_));
}

ElectRespond::~ElectRespond() {
  // @@protoc_insertion_point(destructor:raft.ElectRespond)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ElectRespond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ElectRespond::ArenaDtor(void* object) {
  ElectRespond* _this = reinterpret_cast< ElectRespond* >(object);
  (void)_this;
}
void ElectRespond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ElectRespond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ElectRespond::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.ElectRespond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&accept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&term_) -
        reinterpret_cast<char*>(&accept_)) + sizeof(term_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ElectRespond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_term(&has_bits);
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ElectRespond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.ElectRespond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool accept = 1;
  if (_internal_has_accept()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept(), target);
  }

  // optional int32 term = 2;
  if (_internal_has_term()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_term(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.ElectRespond)
  return target;
}

size_t ElectRespond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.ElectRespond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool accept = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 term = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_term());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ElectRespond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ElectRespond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ElectRespond::GetClassData() const { return &_class_data_; }

void ElectRespond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ElectRespond *>(to)->MergeFrom(
      static_cast<const ElectRespond &>(from));
}


void ElectRespond::MergeFrom(const ElectRespond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.ElectRespond)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000002u) {
      term_ = from.term_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ElectRespond::CopyFrom(const ElectRespond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.ElectRespond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectRespond::IsInitialized() const {
  return true;
}

void ElectRespond::InternalSwap(ElectRespond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ElectRespond, term_)
      + sizeof(ElectRespond::term_)
      - PROTOBUF_FIELD_OFFSET(ElectRespond, accept_)>(
          reinterpret_cast<char*>(&accept_),
          reinterpret_cast<char*>(&other->accept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ElectRespond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_raft_2eproto_getter, &descriptor_table_raft_2eproto_once,
      file_level_metadata_raft_2eproto[4]);
}

// ===================================================================

Raft::~Raft() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Raft::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raft_2eproto);
  return file_level_service_descriptors_raft_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Raft::GetDescriptor() {
  return descriptor();
}

void Raft::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::AppendEntriesRequest*,
                         ::raft::AppendEntriesRespond*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AppendEntries() not implemented.");
  done->Run();
}

void Raft::Elect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::raft::ElectRequest*,
                         ::raft::ElectRespond*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Elect() not implemented.");
  done->Run();
}

void Raft::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_raft_2eproto[0]);
  switch(method->index()) {
    case 0:
      AppendEntries(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::AppendEntriesRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::AppendEntriesRespond*>(
                 response),
             done);
      break;
    case 1:
      Elect(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::raft::ElectRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::raft::ElectRespond*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Raft::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::AppendEntriesRequest::default_instance();
    case 1:
      return ::raft::ElectRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Raft::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::raft::AppendEntriesRespond::default_instance();
    case 1:
      return ::raft::ElectRespond::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Raft_Stub::Raft_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Raft_Stub::Raft_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Raft_Stub::~Raft_Stub() {
  if (owns_channel_) delete channel_;
}

void Raft_Stub::AppendEntries(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::AppendEntriesRequest* request,
                              ::raft::AppendEntriesRespond* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Raft_Stub::Elect(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::raft::ElectRequest* request,
                              ::raft::ElectRespond* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::LogEntry* Arena::CreateMaybeMessage< ::raft::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntriesRequest* Arena::CreateMaybeMessage< ::raft::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntriesRespond* Arena::CreateMaybeMessage< ::raft::AppendEntriesRespond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntriesRespond >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::ElectRequest* Arena::CreateMaybeMessage< ::raft::ElectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::ElectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::ElectRespond* Arena::CreateMaybeMessage< ::raft::ElectRespond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::ElectRespond >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
